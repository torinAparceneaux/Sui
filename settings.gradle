pluginManagement {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
        mavenLocal()
    }
}
dependencyResolutionManagement {
    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
    repositories {
        google()
        mavenCentral()
        mavenLocal()
    }
    versionCatalogs {
        libs {
            version('hidden-api', '4.1.0')
            library('hidden-compat', 'dev.rikka.hidden', 'compat').versionRef('hidden-api')
            library('hidden-stub', 'dev.rikka.hidden', 'stub').versionRef('hidden-api')

            version('refine', '4.3.0')
            library('refine-runtime', 'dev.rikka.tools.refine', 'runtime').versionRef('refine')
            library('refine-annotation', 'dev.rikka.tools.refine', 'annotation').versionRef('refine')
            library('refine-annotation-processor', 'dev.rikka.tools.refine', 'annotation-processor').versionRef('refine')
            plugin('refine', 'dev.rikka.tools.refine').versionRef('refine')
        }
    }
}

include ':module', ':ui'



DirectoryScanner.removeDefaultExclude('**/.gitattributes')

def root = "api"

def propFile = file('local.properties')
def props = new Properties()

if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))

    if (props != null) {
        if (props["api.useLocal"].equals("true")) {
            root = props["api.dir"]
        }
    }
}

include ':aidl'
project(':aidl').projectDir = file("$root${File.separator}aidl")

include ':rish'
project(':rish').projectDir = file("$root${File.separator}rish")

include ':shared'
project(':shared').projectDir = file("$root${File.separator}shared")

include ':api'
project(':api').projectDir = file("$root${File.separator}api")

include ':provider'
project(':provider').projectDir = file("$root${File.separator}provider")

include ':server-shared'
project(':server-shared').projectDir = file("$root${File.separator}server-shared")
